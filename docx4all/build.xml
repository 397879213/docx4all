<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="build" name="docx4all" xmlns:jw="org.unintelligible.antjnlpwar">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../usr/lib/eclipse"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>

	<!-- NB before attempting to use this build file, run:
	
	        mvn install
	        
	     That will put all the jars referenced below in your local maven2 repository.
	     
	     -->	
	
	<property name="m2Repository" value="../../.m2/repository"/>
	
	<property name="plugins.javafx.lib" value="../../.eclipse/org.eclipse.platform_3.3.0_1606436040/configuration/eclipse/plugins/javafx.eclipse.f3editor_0.0.2/lib"/>
    
	<!-- 
       Hmmm, pom for AppFramework-1.03 should specify jre/lib/javaws.jar and swing-worker.jar
    -->
	
    <path id="MavenDependencies.libraryclasspath">
        <pathelement location="${m2Repository}/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar"/>
        <!-- pathelement location="${m2Repository}/xml-apis/xml-apis/1.0.b2/xml-apis-1.0.b2.jar"/ -->
        <pathelement location="${m2Repository}/log4j/log4j/1.2.13/log4j-1.2.13.jar"/>
        <pathelement location="${m2Repository}/jaxen/jaxen/1.1.1/jaxen-1.1.1.jar"/>
        <pathelement location="${m2Repository}/jdom/jdom/1.0/jdom-1.0.jar"/>
        <pathelement location="${m2Repository}/commons-logging/commons-logging-api/1.1/commons-logging-api-1.1.jar"/>
        <pathelement location="${m2Repository}/commons-io/commons-io/1.3.1/commons-io-1.3.1.jar"/>
        <pathelement location="${m2Repository}/commons-httpclient/commons-httpclient/3.1/commons-httpclient-3.1.jar"/>
        <pathelement location="${m2Repository}/junit/junit/3.8.1/junit-3.8.1.jar"/>
        <pathelement location="${m2Repository}/commons-codec/commons-codec/1.2/commons-codec-1.2.jar"/>
        <pathelement location="${m2Repository}/axis/axis/1.4/axis-1.4.jar"/>
        <pathelement location="${m2Repository}/axis/axis-jaxrpc/1.4/axis-jaxrpc-1.4.jar"/>
        <pathelement location="${m2Repository}/axis/axis-saaj/1.4/axis-saaj-1.4.jar"/>
        <pathelement location="${m2Repository}/axis/axis-wsdl4j/1.5.1/axis-wsdl4j-1.5.1.jar"/>
        <pathelement location="${m2Repository}/commons-discovery/commons-discovery/0.2/commons-discovery-0.2.jar"/>
        <pathelement location="${m2Repository}/wss4j/wss4j/1.5.0/wss4j-1.5.0.jar"/>
        <pathelement location="${m2Repository}/com/jhlabs/filters/2.0.235/filters-2.0.235.jar"/>
        <pathelement location="${m2Repository}/org/swinglabs/swing-worker/1.1/swing-worker-1.1.jar"/>
        <pathelement location="${m2Repository}/org/swinglabs/swing-layout/1.0.3/swing-layout-1.0.3.jar"/>
        <pathelement location="${m2Repository}/xfire/opensaml/1.0.1/opensaml-1.0.1.jar"/>  

<!--               
        <pathelement location="../docx4j/dist/docx4j.jar"/>
      -->   
        <pathelement location="${m2Repository}/org/docx4j/docx4j/2.2.2/docx4j-2.2.2.jar"/>
        
        <pathelement location="${m2Repository}/javax/jcr/jcr/1.0/jcr-1.0.jar"/>
        <pathelement location="${m2Repository}/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar"/>
    	<pathelement location="${m2Repository}/commons-lang/commons-lang/2.4/commons-lang-2.4.jar"/>        
<!-- 
        <pathelement location="${m2Repository}/org/apache/xmlgraphics/xmlgraphics-commons/1.3/xmlgraphics-commons-1.3.jar"/>
         -->
        <pathelement location="${m2Repository}/org/apache/xmlgraphics/xmlgraphics-commons/1.3.757686/xmlgraphics-commons-1.3.757686.jar"/>
        
        <pathelement location="${m2Repository}/com/lowagie/itext-unsigned/2.0.8/itext-unsigned-2.0.8.jar"/>
    	<!-- iText 2.0.8 pom dependencies:
        <pathelement location="${m2Repository}/bouncycastle/bcmail-jdk14/138/bcmail-jdk14-138.jar"/>
        <pathelement location="${m2Repository}/bouncycastle/bcprov-jdk14/138/bcprov-jdk14-138.jar"/> -->
        <pathelement location="${m2Repository}/xalan/xalan-patched/2.7.0/xalan-patched-2.7.0.jar"/>
        <pathelement location="${m2Repository}/webdavclient4j/webdavclient4j-vfs/0.9.3/webdavclient4j-vfs-0.9.3.jar"/>
        <pathelement location="${m2Repository}/webdavclient4j/webdavclient4j-core/0.92/webdavclient4j-core-0.92.jar"/>
        <pathelement location="${m2Repository}/pdf-renderer/pdf-renderer/0.2007/pdf-renderer-0.2007.jar"/>
        <pathelement location="${m2Repository}/org/jvnet/jaxb2_commons/ppp/parent-pointer-plugin/1.0/parent-pointer-plugin-1.0.jar"/>
        <pathelement location="${m2Repository}/xhtmlrenderer/minium/0.1/minium-0.1.jar"/>
        <pathelement location="${m2Repository}/xhtmlrenderer/core-renderer/R8pre2/core-renderer-R8pre2.jar"/>
<!--         
        <pathelement location="${m2Repository}/docx4j/fop-fonts/0.2.0/fop-fonts-0.2.0.jar"/>
        <pathelement location="${m2Repository}/org/apache/commons/commons-vfs-patched/1.1/commons-vfs-patched-1.1.jar"/>
         -->
        <pathelement location="${m2Repository}/org/apache/avalon/framework/avalon-framework-api/4.3.1/avalon-framework-api-4.3.1.jar"/>
        <pathelement location="${m2Repository}/org/apache/avalon/framework/avalon-framework-impl/4.3.1/avalon-framework-impl-4.3.1.jar"/>
         
        <pathelement location="${m2Repository}/docx4j/fop-patched/0.95.756436/fop-patched-0.95.756436.jar"/> <!--  without Class-Path in MANIFEST -->
        <pathelement location="${m2Repository}/org/apache/commons/commons-vfs-patched/1.9.1/commons-vfs-patched-1.9.1.jar"/>
         
        <pathelement location="${m2Repository}/org/jdesktop/application/appframework/1.0.3/appframework-1.0.3.jar"/>
        <pathelement location="${m2Repository}/alfresco/community/alfresco-web-service-client-patched/2.9.1/alfresco-web-service-client-patched-2.9.1.jar"/>
        <pathelement location="${m2Repository}/net/java/dev/openjfx/javafxrt/1.0/javafxrt-1.0.jar"/>
        <pathelement location="${m2Repository}/org/bounce/bounce-xmleditorkit-patched/0.11/bounce-xmleditorkit-patched-0.11.jar"/>
<!--         
        <pathelement location="../VFSJFileChooser-branch-jdk5/dist/VFSJFileChooser-0.0.3.jar"/>
         -->
        <pathelement location="${m2Repository}/net/sf/vfsjfilechooser/VFSJFileChooser-patched/0.0.32/VFSJFileChooser-patched-0.0.32.jar"/>
        <pathelement location="${m2Repository}/xml-security/xmlsec/1.4.1/xmlsec-1.4.1.jar"/>
        <pathelement location="${m2Repository}/bouncycastle/bcprov-jdk16-unsigned/136/bcprov-jdk16-unsigned-136.jar"/>

		<!-- we need this for com.sun.xml.bind.marshaller.NamespacePrefixMapper  
        <pathelement location="/home/dev/workspace/Alfresco/HEAD/root/projects/3rd-party/lib/jaxb-api-2.1.jar"/>
        <pathelement location="/home/dev/workspace/Alfresco/HEAD/root/projects/3rd-party/lib/jaxb-impl-2.1.7.jar"/>
        -->
    </path>
	
    <path id="docx4all.classpath">
        <pathelement location="build/classes"/>
        <path refid="MavenDependencies.libraryclasspath"/>
    </path>
    <path id="run.docx4all.classpath">
        <path refid="docx4all.classpath"/>
        <path refid="MavenDependencies.libraryclasspath"/>
    </path>
    <path id="run.Test.classpath">
        <path refid="docx4all.classpath"/>
        <path refid="MavenDependencies.libraryclasspath"/>
    </path>
	
	<path id="jre.libs" description="Java runtime libraries">
	  <pathelement location="${java.home}\lib" />
	 </path>	
    <target name="init">
        <mkdir dir="build/classes"/>
        <copy includeemptydirs="false" todir="build/classes">
            <fileset dir="src/main/java" excludes="**/*.launch, **/*.java"/>
        </copy>
        <copy includeemptydirs="false" todir="build/classes">
            <fileset dir="src/main/resources" excludes="**/*.launch, **/*.java"/>
        </copy>
    </target>
    <target name="clean">
        <delete file="./docx4all.jar"/>
        <delete file="./docx4all.war"/>
        <delete dir="build/classes"/>
        <delete dir="build/lib"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    
    <target name="build-project" depends="init" >
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac bootclasspathref="jre.libs" includeJavaRuntime="yes"
    			debug="true" debuglevel="${debuglevel}" 
        	destdir="build/classes" source="${source}" target="${target}">
        	<!-- bootclasspathref="jre.libs" includeJavaRuntime="yes"
        	     are necessary (except with Apple's Java6 on OSX) to get around:
        	     
        	     [javac] /home/dev/workspace/docx4all/src/org/docx4all/util/XmlUtil.java:108: cannot access com.sun.xml.internal.bind.marshaller.NamespacePrefixMapper
        	     
    			 [javac] class file for com.sun.xml.internal.bind.marshaller.NamespacePrefixMapper not found        	     
        	     
        	     See comment in org.docx4all.util.XmlUtil -->
            <src path="src/main/java"/>
            <classpath refid="docx4all.classpath"/>        	
        </javac>
        <javac debug="true" debuglevel="${debuglevel}" destdir="build/classes" source="${source}" target="${target}">
            <src path="src/main/resources"/>
            <classpath refid="docx4all.classpath"/>
        </javac>    	
    </target>
    
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="docx4all">
        <java classname="org.docx4all.ui.main.WordMLEditor" failonerror="true" fork="yes">
            <jvmarg line="-Dlog4j.configuration=log4j.properties"/>
            <classpath refid="run.docx4all.classpath"/>
        </java>
    </target>
    
  <!-- The Ant Web Start task 
  
  	   You may need to invoke ant with something like: 
  	   
  	       ANT_OPTS="-Xmx512m -XX:MaxPermSize=256m" ant webstart  	   
  
       Replace the servlet jar it generates with our new one from Java 6
       (which handles if-modifies-since properly)
       
       
  -->
    <typedef resource="org/unintelligible/antjnlpwar/antjnlpwar.xml" format="xml" uri="org.unintelligible.antjnlpwar"/>
    <target name="webstart"  depends="clean, build-project" >
		
		<property name="lib" value="./build/lib"/>
		
        <mkdir dir="${lib}"/>
						
		<!-- copy all the jar files! -->
		<copy todir="${lib}" flatten="true">
			<!-- requires Ant 1.7.0 -->
			<path>
			    <path refid="docx4all.classpath"/>
			</path>
		</copy>		
		
		<jar destfile="docx4all.jar" basedir="build/classes" index="true">
			<indexjars>
				<fileset dir="${lib}" />
			</indexjars>
			<!--  workaround for the fact that indexjars doesn't index
			      META-INF, with the result that class loader can't 
			      find eg vfs-providers.xml.
			      See ant bugzilla bug 47457 
			      
			      JAR is happy to have 2 entries with the same name;
			      Unpack will fail though.
			      
			      -->
			<zipfileset src="${lib}/webdavclient4j-vfs-0.9.3.jar" 
				excludes="META-INF/MANIFEST.MF META-INF/ALIAS.* META-INF/*.txt META-INF/*.SERIALIZER META-INF/LICENSE META-INF/NOTICE"
				includes="META-INF/**"/>
			<!--  services/javax.script.ScriptEngineFactory -->
			<zipfileset src="${lib}/javafxrt-1.0.jar" 
				excludes="META-INF/MANIFEST.MF META-INF/ALIAS.* META-INF/*.txt META-INF/*.SERIALIZER META-INF/LICENSE META-INF/NOTICE"
				includes="META-INF/**"/>
			<!--  services/com.sun.tools.xjc.Plugin -->
			<zipfileset src="${lib}/parent-pointer-plugin-1.0.jar" 
				excludes="META-INF/MANIFEST.MF META-INF/ALIAS.* META-INF/*.txt META-INF/*.SERIALIZER META-INF/LICENSE META-INF/NOTICE"
				includes="META-INF/**"/>
			<!--  services/blagh blagh -->
			<zipfileset src="${lib}/xmlgraphics-commons-1.3.757686.jar" 
				excludes="META-INF/MANIFEST.MF META-INF/ALIAS.* META-INF/*.txt META-INF/*.SERIALIZER META-INF/LICENSE META-INF/NOTICE"
				includes="META-INF/**"/>
			<zipfileset src="${lib}/fop-patched-0.95.756436.jar" 
				excludes="META-INF/MANIFEST.MF META-INF/ALIAS.* META-INF/*.txt META-INF/*.SERIALIZER META-INF/LICENSE META-INF/NOTICE
				META-INF/services/org.apache.xmlgraphics.*"
				includes="META-INF/**"/> <!--  2 copies of xmlgraphics causes unpack task to fail -->
		</jar> 
			<!-- somewhere other than ${lib}, docx4all does not need to be in
			     the above; it is handled by jw:application below.  -->
		
					
        <!-- Create a distributable WAR archive of the application using the following attributes:
         * tofile: the destination WAR file
         * codebase: where the application will be deployed to
         * title: the application name
         * vendor: your company name
         * pack200: create pack200 archives for quicker client downloads
         * signStorePass: the password to your Java certificate store (used to sign the jars)
         * signAlias: the name of the certificate to use (used to sign the jars)
         -->
        <jw:jnlpwar
            tofile="docx4all.war"
            codebase="/docx4all"
            title="docx4all"
            vendor="localhost"
            pack200="true"
            signStorepass="password"
            signAlias="alias">
            <!-- should work with a key defined as follows:
            
                     keytool -genkey -alias alias -dname "CN=A Developer, O=Open Source" -validity 9999 -keystore .keystore -keypass password -storepass password
                     
                     -->
            
                <!-- Add a normal and a short description -->
                <jw:description>cross platform WYSIWYG editor for docx files</jw:description>
                <jw:description kind="short">cross platform WYSIWYG editor for docx files</jw:description>
                <!-- Add an icon for the application 
                <jw:icon file="path/to/icon.jpg"/> -->
                <!-- Show a splash screen when the application launches 
                <jw:icon kind="splash" file="path/to/splash.jpg"/> -->
                <!-- Specify the minimal version of Java required by the app, along with
                 some command-line arguments -->
                <jw:j2se minVersion="1.5"> <!-- task doesn't support 1.6, nor href="http://java.sun.com/products/autodl/j2se" -->
                </jw:j2se>
                <!-- Add the libraries used by the application -->
                <lib dir="${lib}">
                    <include name="**/*.jar"/>
                </lib>
                <!-- Specify the main class for the application,
                 and the jar it is located in (can be duplicate from the lib element) -->
                <jw:application mainclass="org.docx4all.ui.main.WordMLEditor" jar="docx4all.jar"/>
        </jw:jnlpwar>
    </target>	
    
</project>
